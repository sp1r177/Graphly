const http = require('http');

// –¢–µ—Å—Ç API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
function testGenerationAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...');
  
  const postData = JSON.stringify({
    prompt: '–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ø—Ä–æ –∫–æ—Ñ–µ–π–Ω—é',
    templateType: 'VK_POST'
  });

  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/generate',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': Buffer.byteLength(postData)
    }
  };

  const req = http.request(options, (res) => {
    console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`);
    
    let data = '';
    res.on('data', (chunk) => {
      data += chunk;
    });
    
    res.on('end', () => {
      try {
        const response = JSON.parse(data);
        console.log('‚úÖ –û—Ç–≤–µ—Ç API:', JSON.stringify(response, null, 2));
        
        if (response.text) {
          console.log('üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:', response.text.length);
        } else {
          console.log('‚ùå –¢–µ–∫—Å—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
        }
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', error.message);
        console.log('üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', data);
      }
    });
  });

  req.on('error', (error) => {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev');
  });

  req.write(postData);
  req.end();
}

// –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ API
function testAPIStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API...');
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/generate',
    method: 'GET'
  };

  const req = http.request(options, (res) => {
    console.log(`üì° –°—Ç–∞—Ç—É—Å API: ${res.statusCode}`);
    
    let data = '';
    res.on('data', (chunk) => {
      data += chunk;
    });
    
    res.on('end', () => {
      try {
        const response = JSON.parse(data);
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å API:', JSON.stringify(response, null, 2));
        
        // –ï—Å–ª–∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        if (res.statusCode === 200) {
          console.log('\nüöÄ API —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...');
          setTimeout(testGenerationAPI, 1000);
        }
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
        console.log('üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', data);
      }
    });
  });

  req.on('error', (error) => {
    console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run dev');
  });

  req.end();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...\n');
testAPIStatus();