// –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç API –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞
const http = require('http');

console.log('üß™ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ POST –∑–∞–ø—Ä–æ—Å–∞
function testAPI() {
  const postData = JSON.stringify({
    prompt: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    templateType: 'VK_POST'
  });

  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/generate',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': Buffer.byteLength(postData)
    }
  };

  console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞:', `http://${options.hostname}:${options.port}${options.path}`);
  console.log('üìù –î–∞–Ω–Ω—ã–µ:', postData);
  console.log();

  const req = http.request(options, (res) => {
    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', res.statusCode);
    console.log('üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏:', JSON.stringify(res.headers, null, 2));

    let data = '';
    res.on('data', (chunk) => {
      data += chunk;
    });

    res.on('end', () => {
      console.log('üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:');
      try {
        const parsed = JSON.parse(data);
        console.log(JSON.stringify(parsed, null, 2));
      } catch (e) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON:', data);
      }
    });
  });

  req.on('error', (e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', e.message);
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('1. –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω (npm run dev)');
    console.log('2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3000)');
    console.log('3. –û—à–∏–±–∫–∞ –≤ API —Ä–æ—É—Ç–µ');
    console.log('4. –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  });

  req.write(postData);
  req.end();
}

// –¢–µ—Å—Ç GET –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Å—Ç–∞—Ç—É—Å—É
function testAPIStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API...\n');

  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/generate',
    method: 'GET'
  };

  const req = http.request(options, (res) => {
    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', res.statusCode);

    let data = '';
    res.on('data', (chunk) => {
      data += chunk;
    });

    res.on('end', () => {
      try {
        const parsed = JSON.parse(data);
        console.log('üìä –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
        if (parsed.environment) {
          Object.entries(parsed.environment).forEach(([key, value]) => {
            console.log(`  ${key}: ${value}`);
          });
        }
        console.log('\n‚úÖ API —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!\n');
        // –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        setTimeout(testAPI, 1000);
      } catch (e) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞:', data);
      }
    });
  });

  req.on('error', (e) => {
    console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
    console.log('\nüö® –°–ï–†–í–ï–† –ù–ï –ó–ê–ü–£–©–ï–ù!');
    console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
  });

  req.end();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testAPIStatus();
