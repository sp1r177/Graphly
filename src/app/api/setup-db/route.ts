import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const dbUrl = process.env.DATABASE_URL
    if (!dbUrl) {
      return NextResponse.json({
        error: 'DATABASE_URL not found',
        message: 'Add DATABASE_URL to Vercel environment variables'
      }, { status: 400 })
    }

    console.log('üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...')
    await prisma.$connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü—ã
    try {
      const userCount = await prisma.user.count()
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', userCount)
      
      return NextResponse.json({
        status: 'success',
        message: 'Database is ready',
        userCount,
        databaseUrl: dbUrl.substring(0, 20) + '...',
        timestamp: new Date().toISOString()
      })
      
    } catch (tableError) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º...')
      
      // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö
      // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
      try {
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SQL
        await prisma.$executeRaw`
          CREATE TABLE IF NOT EXISTS "users" (
            "id" TEXT NOT NULL PRIMARY KEY,
            "email" TEXT NOT NULL UNIQUE,
            "password" TEXT NOT NULL,
            "name" TEXT,
            "subscriptionStatus" TEXT NOT NULL DEFAULT 'FREE',
            "usageCountDay" INTEGER NOT NULL DEFAULT 0,
            "usageCountMonth" INTEGER NOT NULL DEFAULT 0,
            "lastGenerationDate" DATETIME,
            "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
            "updatedAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
          )
        `
        
        await prisma.$executeRaw`
          CREATE TABLE IF NOT EXISTS "generations" (
            "id" TEXT NOT NULL PRIMARY KEY,
            "userId" TEXT NOT NULL,
            "prompt" TEXT NOT NULL,
            "outputText" TEXT,
            "outputImageUrl" TEXT,
            "templateType" TEXT NOT NULL,
            "timestamp" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY ("userId") REFERENCES "users" ("id") ON DELETE CASCADE
          )
        `
        
        await prisma.$executeRaw`
          CREATE TABLE IF NOT EXISTS "payments" (
            "id" TEXT NOT NULL PRIMARY KEY,
            "userId" TEXT NOT NULL,
            "amount" REAL NOT NULL,
            "currency" TEXT NOT NULL DEFAULT 'RUB',
            "status" TEXT NOT NULL DEFAULT 'PENDING',
            "yandexPaymentId" TEXT,
            "subscriptionType" TEXT NOT NULL,
            "timestamp" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY ("userId") REFERENCES "users" ("id") ON DELETE CASCADE
          )
        `
        
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ SQL')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
        const userCount = await prisma.user.count()
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î:', userCount)
        
        return NextResponse.json({
          status: 'success',
          message: 'Database tables created successfully',
          userCount,
          databaseUrl: dbUrl.substring(0, 20) + '...',
          timestamp: new Date().toISOString()
        })
        
      } catch (sqlError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ SQL:', (sqlError as Error).message)
        
        return NextResponse.json({
          status: 'error',
          message: 'Failed to create database tables',
          error: (sqlError as Error).message,
          suggestion: 'Run: npx prisma migrate deploy',
          timestamp: new Date().toISOString()
        }, { status: 500 })
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î:', error)
    
    return NextResponse.json({
      status: 'error',
      message: 'Database connection failed',
      error: error instanceof Error ? error.message : 'Unknown error',
      suggestion: 'Check DATABASE_URL and database accessibility',
      timestamp: new Date().toISOString()
    }, { status: 500 })
  } finally {
    await prisma.$disconnect()
  }
}

export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ë–î
    await prisma.$connect()
    const userCount = await prisma.user.count()
    
    return NextResponse.json({
      status: 'connected',
      userCount,
      message: 'Database is accessible',
      timestamp: new Date().toISOString()
    })
    
  } catch (error) {
    return NextResponse.json({
      status: 'error',
      message: 'Database not accessible',
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    }, { status: 500 })
  } finally {
    await prisma.$disconnect()
  }
}
