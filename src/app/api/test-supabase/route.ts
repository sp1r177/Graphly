import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

export const dynamic = 'force-dynamic'

export async function GET(request: NextRequest) {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envCheck = {
      SUPABASE_URL: process.env.SUPABASE_URL ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω',
      SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω',
      JWT_SECRET: process.env.JWT_SECRET ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω',
      NODE_ENV: process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    }
    
    console.log('üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', envCheck)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    const { data, error } = await supabase
      .from('users')
      .select('count', { count: 'exact' })
    
    if (error) {
      throw error
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ')
    console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î:', data?.length || 0)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    const { data: sampleUser } = await supabase
      .from('users')
      .select('id,email,name,subscriptionStatus,createdAt')
      .limit(1)
      .single()
    
    return NextResponse.json({
      status: 'OK',
      message: 'Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç',
      environment: envCheck,
      database: {
        connected: true,
        userCount: data?.length || 0,
        sampleUser: sampleUser || '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        tableExists: !error
      },
      timestamp: new Date().toISOString()
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error)
    
    return NextResponse.json({
      status: 'ERROR',
      message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase',
      error: error instanceof Error ? error.message : 'Unknown error',
      environment: {
        SUPABASE_URL: process.env.SUPABASE_URL ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω',
        SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω',
        JWT_SECRET: process.env.JWT_SECRET ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω',
        NODE_ENV: process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
      },
      timestamp: new Date().toISOString()
    }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ Supabase...')
    
    const { email, password, name } = await request.json()
    
    if (!email || !password) {
      return NextResponse.json(
        { error: 'Email and password are required' },
        { status: 400 }
      )
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = {
      id: crypto.randomUUID(),
      email: email + '_test',
      password: 'test_password',
      name: name || 'Test User',
      subscriptionStatus: 'FREE',
      usageCountDay: 0,
      usageCountMonth: 0,
    }
    
    const { data, error } = await supabase
      .from('users')
      .insert(testUser)
      .select('id,email,name,subscriptionStatus')
      .single()
    
    if (error) {
      throw error
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await supabase
      .from('users')
      .delete()
      .eq('id', data.id)
    
    return NextResponse.json({
      message: '–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ',
      testUser: data
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
    
    return NextResponse.json({
      error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
