import { NextRequest, NextResponse } from 'next/server'
import { getUserFromRequest } from '@/lib/auth'
import { prisma } from '@/lib/db'

export const dynamic = 'force-dynamic'

export async function GET(request: NextRequest) {
  // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  return NextResponse.json({
    status: 'OK',
    message: 'Generate API —Ä–∞–±–æ—Ç–∞–µ—Ç',
    environment: {
      DATABASE_URL: process.env.DATABASE_URL ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω',
      JWT_SECRET: process.env.JWT_SECRET ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω',
      YANDEX_API_KEY: process.env.YANDEX_API_KEY ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω',
      YANDEX_FOLDER_ID: process.env.YANDEX_FOLDER_ID ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω',
      SUPABASE_URL: process.env.SUPABASE_URL ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω',
      SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω',
      NODE_ENV: process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    },
    timestamp: new Date().toISOString()
  })
}

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω')

    const isDev = process.env.NODE_ENV !== 'production'

    // –í–†–ï–ú–ï–ù–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let authUser = null

    if (!isDev) {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      authUser = getUserFromRequest(request)

      if (!authUser) {
        return NextResponse.json(
          { error: 'Unauthorized' },
          { status: 401 }
        )
      }
    } else {
      console.log('üîß Dev —Ä–µ–∂–∏–º: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞')
      authUser = { userId: 'dev-user-id', email: 'dev@example.com' }
    }

    const { prompt, templateType } = await request.json()
    console.log('üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', { prompt: prompt?.substring(0, 50), templateType })

    if (!prompt || !templateType) {
      return NextResponse.json(
        { error: 'Prompt and template type are required' },
        { status: 400 }
      )
    }

    console.log('ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞...')
    // –í–†–ï–ú–ï–ù–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    const generatedText = await generateContent(prompt, templateType)

    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:', generatedText.length)

    // –í–†–ï–ú–ï–ù–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω–æ (–≤—Ä–µ–º–µ–Ω–Ω–æ)')

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    const generation = {
      id: 'test-generation-' + Date.now(),
      timestamp: new Date()
    }

    const result = {
      id: generation.id,
      text: generatedText,
      templateType,
      timestamp: generation.timestamp,
      debug: {
        promptLength: prompt.length,
        textLength: generatedText.length,
        isDev,
        hasAuth: !!authUser
      }
    }

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç')
    return NextResponse.json(result)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error)

    // Handle specific error types
    if (error instanceof Error) {
      if (error.message.includes('API')) {
        return NextResponse.json(
          { error: error.message },
          { status: 400 }
        )
      } else if (error.message.includes('–ª–∏–º–∏—Ç') || error.message.includes('limit')) {
        return NextResponse.json(
          { error: error.message },
          { status: 429 }
        )
      }
    }

    return NextResponse.json(
      { error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
}

async function generateContent(prompt: string, templateType: string): Promise<string> {
  const yandexApiKey = process.env.YANDEX_API_KEY
  const yandexFolderId = process.env.YANDEX_FOLDER_ID
  const yandexApiUrl = 'https://llm.api.cloud.yandex.net/foundationModels/v1/completion'

  console.log('üîç Yandex GPT API Debug:')
  console.log('API Key:', yandexApiKey ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω')
  console.log('Folder ID:', yandexFolderId ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω')
  console.log('API URL:', yandexApiUrl)

  // –í–†–ï–ú–ï–ù–ù–û: –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Yandex GPT –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  console.log('üöÄ –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Yandex GPT API...')

  try {
    // Create system prompt based on template type
    const systemPrompts = {
      'VK_POST': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ—Å—Ç–æ–≤ –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –°–æ–∑–¥–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç —Å —ç–º–æ–¥–∑–∏ –∏ —Ö–µ—à—Ç–µ–≥–∞–º–∏. –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∂–∏–≤—ã–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ –≤–æ–≤–ª–µ–∫–∞—é—â–∏–º.',
      'TELEGRAM_POST': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ—Å—Ç–æ–≤ –¥–ª—è Telegram. –°–æ–∑–¥–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç —Å —ç–º–æ–¥–∑–∏. –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ª–µ–≥–∫–æ —á–∏—Ç–∞–µ–º—ã–º.',
      'EMAIL_CAMPAIGN': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É. –°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ email-–ø–∏—Å—å–º–æ —Å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π —Ç–µ–º–æ–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º.',
      'BLOG_ARTICLE': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å—Ç–∞—Ç–µ–π –¥–ª—è –±–ª–æ–≥–∞. –°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ–º.',
      'VIDEO_SCRIPT': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –≤–∏–¥–µ–æ. –°–æ–∑–¥–∞–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ü–µ–Ω, –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.',
      'IMAGE_GENERATION': '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç–∏–ª—è, –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.'
    }

    const systemPrompt = systemPrompts[templateType as keyof typeof systemPrompts] || '–°–æ–∑–¥–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞.'

    const requestBody = {
      modelUri: `gpt://${yandexFolderId}/yandexgpt`,
      completionOptions: {
        stream: false,
        temperature: 0.7,
        maxTokens: 2000
      },
      messages: [
        {
          role: "system",
          text: systemPrompt
        },
        {
          role: "user",
          text: prompt
        }
      ]
    }

    console.log('üöÄ Sending request to Yandex GPT API...')
    console.log('Request body:', JSON.stringify(requestBody, null, 2))

    const response = await fetch(yandexApiUrl, {
      method: 'POST',
      headers: {
        'Authorization': `Api-Key ${yandexApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody)
    })

    console.log('üì° Yandex GPT API response status:', response.status)

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Yandex GPT API error:', response.status, errorText)

      // Handle specific error cases
      if (response.status === 401) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á Yandex. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ YANDEX_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.')
      } else if (response.status === 403) {
        throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Yandex Cloud.')
      } else if (response.status === 429) {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
      } else if (response.status === 500) {
        throw new Error('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Yandex. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ Yandex GPT API: ${response.status} - ${errorText}`)
      }
    }

    const data = await response.json()
    console.log('‚úÖ Yandex GPT API response received:', JSON.stringify(data, null, 2))

    if (data.result && data.result.alternatives && data.result.alternatives[0]) {
      const generatedText = data.result.alternatives[0].message.text
      console.log('üéâ Generated text length:', generatedText.length)
      return generatedText
    } else {
      console.error('‚ùå Invalid response structure from Yandex GPT API:', data)
      throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Yandex GPT API')
    }

  } catch (error) {
    console.error('‚ùå Yandex GPT API error:', error)

    // –ï—Å–ª–∏ –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫
    console.warn('‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –º–æ–∫-–≥–µ–Ω–µ—Ä–∞—Ü–∏—é')
    return generateMockContent(prompt, templateType)
  }
}

async function generateMockContent(prompt: string, templateType: string): Promise<string> {
  // Simulate AI generation delay
  await new Promise(resolve => setTimeout(resolve, 1000))

  // Mock content generation based on template type
  const templates = {
    'VK_POST': `üì± –ü–æ—Å—Ç –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:\n\n${prompt}\n\n#–∫–æ–Ω—Ç–µ–Ω—Ç #–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ #–ø–æ—Å—Ç`,
    'TELEGRAM_POST': `üì¢ –ü–æ—Å—Ç –¥–ª—è Telegram:\n\n${prompt}\n\n#telegram #–ø–æ—Å—Ç #–∫–æ–Ω—Ç–µ–Ω—Ç`,
    'EMAIL_CAMPAIGN': `üìß Email-–∫–∞–º–ø–∞–Ω–∏—è:\n\n–¢–µ–º–∞: ${prompt}\n\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${prompt}\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ö–æ–º–∞–Ω–¥–∞ AI–ö–æ–Ω—Ç–µ–Ω—Ç`,
    'BLOG_ARTICLE': `üìù –°—Ç–∞—Ç—å—è –¥–ª—è –±–ª–æ–≥–∞:\n\n# ${prompt}\n\n${prompt}\n\n## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n\n${prompt}`,
    'VIDEO_SCRIPT': `üé¨ –°—Ü–µ–Ω–∞—Ä–∏–π –≤–∏–¥–µ–æ:\n\n–°–¶–ï–ù–ê 1:\n${prompt}\n\n–°–¶–ï–ù–ê 2:\n${prompt}\n\n–°–¶–ï–ù–ê 3:\n${prompt}`,
    'IMAGE_GENERATION': `üñºÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n${prompt}\n\n–°—Ç–∏–ª—å: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π`
  }

  return templates[templateType as keyof typeof templates] || `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:\n\n${prompt}`
}