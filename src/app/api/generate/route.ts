import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'

// Template-specific generation logic
const generateContent = async (prompt: string, templateType: string) => {
  // This is a stub implementation - in production, integrate with actual AI APIs
  const templates = {
    VK_POST: {
      prefix: 'üéØ ',
      structure: 'social_media',
      maxLength: 280,
      includeHashtags: true,
    },
    TELEGRAM_POST: {
      prefix: 'üì¢ ',
      structure: 'social_media',
      maxLength: 500,
      includeHashtags: true,
    },
    EMAIL_CAMPAIGN: {
      prefix: '–¢–µ–º–∞: ',
      structure: 'email',
      maxLength: 1000,
      includeHashtags: false,
    },
    BLOG_ARTICLE: {
      prefix: '',
      structure: 'article',
      maxLength: 2000,
      includeHashtags: false,
    },
    VIDEO_SCRIPT: {
      prefix: '–°–¶–ï–ù–ê 1: ',
      structure: 'script',
      maxLength: 800,
      includeHashtags: false,
    },
    IMAGE_GENERATION: {
      prefix: '',
      structure: 'image_prompt',
      maxLength: 200,
      includeHashtags: false,
    },
  }

  const template = templates[templateType as keyof typeof templates]
  
  // Simulate AI generation delay
  await new Promise(resolve => setTimeout(resolve, 1500))

  // Generate mock content based on template
  let generatedText = ''
  let imageUrl = null

  switch (templateType) {
    case 'VK_POST':
      generatedText = `${template.prefix}${prompt}

‚ú® –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞
üöÄ –ü—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏  
üí° –ü–æ–≤—ã—à–∞–µ—Ç –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å

–ó–∞–∫–∞–∂–∏—Ç–µ –ø–æ–¥–æ–±–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

#–∫–æ–Ω—Ç–µ–Ω—Ç #smm #–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ #–±–∏–∑–Ω–µ—Å #${prompt.split(' ')[0].toLowerCase()}`
      break

    case 'TELEGRAM_POST':
      generatedText = `${template.prefix}${prompt}

üìà –≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –æ—Ö–≤–∞—Ç—ã
‚Ä¢ –ü–æ–≤—ã—Å–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é  
‚Ä¢ –ü—Ä–∏–≤–ª–µ—á—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤

üí¨ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö, –∫–∞–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∞–º –Ω—É–∂–µ–Ω!

#telegram #–∫–æ–Ω—Ç–µ–Ω—Ç #smm`
      break

    case 'EMAIL_CAMPAIGN':
      generatedText = `–¢–µ–º–∞: ${prompt} - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å! üéÅ

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ —Ç–µ–º—É "${prompt}".

üìß –í —ç—Ç–æ–º –ø–∏—Å—å–º–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ:
‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

[–ö–ù–û–ü–ö–ê: –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ]

–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏,
–ö–æ–º–∞–Ω–¥–∞ AI–ö–æ–Ω—Ç–µ–Ω—Ç`
      break

    case 'BLOG_ARTICLE':
      generatedText = `${prompt}: –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ

–í–≤–µ–¥–µ–Ω–∏–µ

${prompt} - —ç—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é —Å—Ç–æ–∏—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ. –í —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏ –¥–∞–¥–∏–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å

1. –ü–µ—Ä–≤—ã–π –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç
–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞ —Ç–µ–º—ã...

2. –í—Ç–æ—Ä–æ–π –∫–ª—é—á–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç  
–†–∞–∑–±–æ—Ä –≤—Ç–æ—Ä–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...

3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é...

–ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ü–æ–¥–≤–æ–¥—è –∏—Ç–æ–≥–∏, –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ ${prompt} —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.`
      break

    case 'VIDEO_SCRIPT':
      generatedText = `–°–¶–ï–ù–ê 1: –ö—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω - ${prompt}

–ó–ê–ö–ê–î–†–û–í–´–ô –ì–û–õ–û–°: "–°–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º –ø—Ä–æ ${prompt}"

–°–¶–ï–ù–ê 2: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

–¢–ï–ö–°–¢ –ù–ê –≠–ö–†–ê–ù–ï: "3 –≥–ª–∞–≤–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞"

–°–¶–ï–ù–ê 3: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤
–ì–û–õ–û–°: "–ü–µ—Ä–≤—ã–π –º–æ–º–µ–Ω—Ç - —ç—Ç–æ..."

–°–¶–ï–ù–ê 4: –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
–ì–û–õ–û–°: "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ!"

–ö–û–ù–ï–¶`
      break

    case 'IMAGE_GENERATION':
      generatedText = `–ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: "${prompt}"

–°—Ç–∏–ª—å: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
–¶–≤–µ—Ç–∞: –°–∏–Ω–∏–π, –±–µ–ª—ã–π, —Å–µ—Ä—ã–π  
–ö–æ–º–ø–æ–∑–∏—Ü–∏—è: –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
–ö–∞—á–µ—Å—Ç–≤–æ: –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ`
      imageUrl = '/api/placeholder/512/512'
      break

    default:
      generatedText = `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ç–µ–º—É: ${prompt}\n\n–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ AI —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á.`
  }

  return { text: generatedText, imageUrl }
}

export async function POST(request: NextRequest) {
  try {
    const { prompt, templateType } = await request.json()

    if (!prompt || !templateType) {
      return NextResponse.json(
        { error: 'Prompt and template type are required' },
        { status: 400 }
      )
    }

    // Check if user is authenticated for usage tracking
    const authHeader = request.headers.get('authorization')
    let userId = null
    
    if (authHeader) {
      // In production, verify JWT token here
      // For now, we'll allow anonymous generation for demo
    }

    // Generate content
    const result = await generateContent(prompt, templateType)

    // Save generation to database if user is authenticated
    if (userId) {
      try {
        await prisma.generation.create({
          data: {
            userId,
            prompt,
            outputText: result.text,
            outputImageUrl: result.imageUrl,
            templateType: templateType as any,
          },
        })

        // Update user usage count
        await prisma.user.update({
          where: { id: userId },
          data: {
            usageCountDay: { increment: 1 },
            usageCountMonth: { increment: 1 },
            lastGenerationDate: new Date(),
          },
        })
      } catch (dbError) {
        console.error('Database error:', dbError)
        // Continue even if DB fails
      }
    }

    return NextResponse.json(result)
  } catch (error) {
    console.error('Generation error:', error)
    return NextResponse.json(
      { error: 'Failed to generate content' },
      { status: 500 }
    )
  }
}