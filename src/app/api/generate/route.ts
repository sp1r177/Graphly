import { NextRequest, NextResponse } from 'next/server'
import { getUserFromRequest } from '@/lib/auth'
import { supabase, getUserProfile, updateUserProfile } from '@/lib/supabase'
import { yandexGPT } from '@/lib/yandex-gpt'

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const { prompt, templateType } = await request.json()

    if (!prompt || !templateType) {
      return NextResponse.json(
        { error: 'Prompt and template type are required' },
        { status: 400 }
      )
    }

    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const user = {
      id: 'anonymous',
      subscription_status: 'FREE',
      usage_count_day: 0,
      usage_count_month: 0
    }

    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    // Generate content using Yandex GPT
    let generatedText: string
    let tokensUsed: number = 0

    // Check if Yandex GPT is configured
    const yandexApiKey = process.env.YANDEX_API_KEY || process.env.YANDEX_GPT_API_KEY
    const yandexFolderId = process.env.YANDEX_FOLDER_ID || process.env.YANDEX_GPT_FOLDER_ID

    // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞
    console.log('Using fallback generation for now')
    generatedText = await generateContent(prompt, templateType)
    tokensUsed = 100
    
    // TODO: –í–∫–ª—é—á–∏—Ç—å Yandex GPT –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    /*
    if (yandexApiKey && yandexFolderId) {
      try {
        console.log('Starting Yandex GPT generation:', { prompt, templateType })
        const result = await yandexGPT.generateContent(prompt, templateType)
        generatedText = result.text
        tokensUsed = result.tokensUsed
        console.log('Yandex GPT generation successful:', { textLength: generatedText.length, tokensUsed })
      } catch (error) {
        console.error('Yandex GPT generation failed:', {
          error: error instanceof Error ? error.message : 'Unknown error',
          prompt,
          templateType
        })
        // Fallback to mock generation if Yandex GPT fails
        generatedText = await generateContent(prompt, templateType)
        tokensUsed = 100
        console.log('Using fallback generation')
      }
    } else {
      console.log('Yandex GPT not configured, using fallback generation')
      generatedText = await generateContent(prompt, templateType)
      tokensUsed = 100
    }
    */
    
    // Save generation to database (optional)
    let generation = null
    if (supabase) {
      try {
        const { data: genData, error: generationError } = await supabase
          .from('generations')
          .insert({
            user_id: user.id,
            prompt,
            output_text: generatedText,
            template_type: templateType,
            tokens_used: tokensUsed,
          })
          .select()
          .single()

        if (!generationError) {
          generation = genData
        } else {
          console.error('Error saving generation:', generationError)
        }

        // Update user usage counts
        await updateUserProfile(authUser.id, {
          usage_count_day: user.usage_count_day + 1,
          usage_count_month: user.usage_count_month + 1,
        })
      } catch (dbError) {
        console.error('Database error:', dbError)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      }
    }

    return NextResponse.json({
      id: generation?.id || 'temp-' + Date.now(),
      text: generatedText,
      templateType,
      timestamp: generation?.created_at || new Date().toISOString(),
      tokensUsed,
      remainingTokens: {
        daily: user.subscription_status === 'FREE' ? Math.max(0, 10 - (user.usage_count_day + 1)) : -1,
        monthly: user.subscription_status === 'PRO' ? Math.max(0, 100 - (user.usage_count_month + 1)) : -1
      }
    })

  } catch (error) {
    console.error('Generation error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

async function generateContent(prompt: string, templateType: string): Promise<string> {
  // Simulate AI generation delay
  await new Promise(resolve => setTimeout(resolve, 2000))
  
  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const templates = {
    'VK_POST': `üî• –ü–æ—Å—Ç –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ

${prompt}

üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –∏ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ö–≤–∞—Ç–∞!

#–∫–æ–Ω—Ç–µ–Ω—Ç #–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ #–ø–æ—Å—Ç #–º–∞—Ä–∫–µ—Ç–∏–Ω–≥`,

    'TELEGRAM_POST': `üì¢ –ü–æ—Å—Ç –¥–ª—è Telegram

${prompt}

üöÄ Telegram - –∏–¥–µ–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π!

#telegram #–ø–æ—Å—Ç #–∫–æ–Ω—Ç–µ–Ω—Ç #–º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä`,

    'EMAIL_CAMPAIGN': `üìß Email-—Ä–∞—Å—Å—ã–ª–∫–∞

–¢–µ–º–∞ –ø–∏—Å—å–º–∞: ${prompt}

–î–æ—Ä–æ–≥–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏!

${prompt}

–ú—ã —Ä–∞–¥—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –æ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–∞.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ AI–ö–æ–Ω—Ç–µ–Ω—Ç

P.S. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏!`,

    'BLOG_ARTICLE': `üìù –°—Ç–∞—Ç—å—è –¥–ª—è –±–ª–æ–≥–∞

# ${prompt}

## –í–≤–µ–¥–µ–Ω–∏–µ

${prompt} - —ç—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.

## –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å

–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ ${prompt} –∏–≥—Ä–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã:

- –ü–µ—Ä–≤—ã–π –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç
- –í—Ç–æ—Ä–æ–π –∫–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç–æ—Ä  
- –¢—Ä–µ—Ç–∏–π –∞—Å–ø–µ–∫—Ç –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã

1. –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ
2. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏
3. –ù–µ –±–æ–π—Ç–µ—Å—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

${prompt} - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç—Ä–µ–Ω–¥, –∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.

---

*–°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é AI–ö–æ–Ω—Ç–µ–Ω—Ç*`,

    'VIDEO_SCRIPT': `üé¨ –°—Ü–µ–Ω–∞—Ä–∏–π –≤–∏–¥–µ–æ

# ${prompt}

## –°–¶–ï–ù–ê 1: –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ (0-15 —Å–µ–∫)
"–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∑—å—è! –°–µ–≥–æ–¥–Ω—è –º—ã –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ ${prompt}."

## –°–¶–ï–ù–ê 2: –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å (15-45 —Å–µ–∫)
"${prompt} - —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –ø–æ –ø—É–Ω–∫—Ç–∞–º..."

## –°–¶–ï–ù–ê 3: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã (45-60 —Å–µ–∫)
"–í–æ—Ç —á—Ç–æ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –¥–µ–ª–∞—Ç—å —Å ${prompt}:"

## –°–¶–ï–ù–ê 4: –ó–∞–∫–ª—é—á–µ–Ω–∏–µ (60-75 —Å–µ–∫)
"–ù–∞–¥–µ—é—Å—å, —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –ø–æ–ª–µ–∑–Ω–∞! –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!"

---
*–°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é AI–ö–æ–Ω—Ç–µ–Ω—Ç*`,

    'IMAGE_GENERATION': `üñºÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

${prompt}

**–°—Ç–∏–ª—å:** —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π
**–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞:** —è—Ä–∫–∏–µ, –ø—Ä–∏–≤–ª–µ–∫–∞—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞
**–ö–æ–º–ø–æ–∑–∏—Ü–∏—è:** —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
**–î–µ—Ç–∞–ª–∏:** –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, —á–µ—Ç–∫–∏–µ –ª–∏–Ω–∏–∏, –ø—Ä–∏—è—Ç–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞

*–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é AI–ö–æ–Ω—Ç–µ–Ω—Ç*`
  }
  
  return templates[templateType as keyof typeof templates] || `‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

${prompt}

---
*–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é AI–ö–æ–Ω—Ç–µ–Ω—Ç*`
}