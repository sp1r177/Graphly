import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'

// Template-specific generation logic
const generateContent = async (prompt: string, templateType: string) => {
  // This is a stub implementation - in production, integrate with actual AI APIs
  const templates = {
    VK_POST: {
      prefix: 'üì± ',
      structure: 'social_media',
      maxLength: 280,
      includeHashtags: true,
    },
    TELEGRAM_POST: {
      prefix: 'üì¢ ',
      structure: 'social_media',
      maxLength: 500,
      includeHashtags: true,
    },
    EMAIL_CAMPAIGN: {
      prefix: 'üìß ',
      structure: 'email',
      maxLength: 1000,
      includeHashtags: false,
    },
    BLOG_ARTICLE: {
      prefix: 'üìù ',
      structure: 'article',
      maxLength: 2000,
      includeHashtags: false,
    },
    INSTAGRAM_POST: {
      prefix: 'üì∏ ',
      structure: 'social_media',
      maxLength: 300,
      includeHashtags: true,
    },
    AD_COPY: {
      prefix: 'üéØ ',
      structure: 'advertising',
      maxLength: 150,
      includeHashtags: false,
    },
  }

  const template = templates[templateType as keyof typeof templates]
  
  // Simulate AI generation delay
  await new Promise(resolve => setTimeout(resolve, 2000))

  // Generate mock content based on template
  let generatedText = ''
  let imageUrl = null

  switch (templateType) {
    case 'VK_POST':
      generatedText = `${template.prefix}${prompt}

‚ú® –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞
‚Ä¢ –ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –≠–º–æ–¥–∑–∏ –∏ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ö–≤–∞—Ç–∞

üöÄ –≠—Ç–æ—Ç –ø–æ—Å—Ç –ø–æ–º–æ–∂–µ—Ç:
- –£–≤–µ–ª–∏—á–∏—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –ü—Ä–∏–≤–ª–µ—á—å –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
- –ü–æ–≤—ã—Å–∏—Ç—å —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞

üí° –°–æ–≤–µ—Ç: –ü—É–±–ª–∏–∫—É–π—Ç–µ –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏

#–∫–æ–Ω—Ç–µ–Ω—Ç #smm #–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ #–±–∏–∑–Ω–µ—Å #${prompt.split(' ')[0].toLowerCase()} #—Ä–æ—Å—Å–∏—è`
      break

    case 'TELEGRAM_POST':
      generatedText = `${template.prefix}${prompt}

üìà –≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Telegram-–∞—É–¥–∏—Ç–æ—Ä–∏–∏:

‚úÖ –õ–µ–≥–∫–æ —á–∏—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚úÖ –ü—Ä–∏–∑—ã–≤–∞–µ—Ç –∫ –¥–µ–π—Å—Ç–≤–∏—é

üéØ –¶–µ–ª—å: –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –≤—ã–∑–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å

üí¨ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö, –∫–∞–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∞–º –Ω—É–∂–µ–Ω!

#telegram #–∫–æ–Ω—Ç–µ–Ω—Ç #smm #${prompt.split(' ')[0].toLowerCase()}`
      break

    case 'EMAIL_CAMPAIGN':
      generatedText = `–¢–µ–º–∞: ${prompt} - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å! üéÅ

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç!

–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ —Ç–µ–º—É "${prompt}", –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–µ–Ω –∏–º–µ–Ω–Ω–æ –≤–∞–º.

üìß –í —ç—Ç–æ–º –ø–∏—Å—å–º–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ:
‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–π —Ç–µ–º–µ
‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Å–∫–∏–¥–∫–∏

üî• –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:
- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
- –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–∏–Ω–∫–∞–º
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏

[–ö–ù–û–ü–ö–ê: –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ]

–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏,
–ö–æ–º–∞–Ω–¥–∞ AI–ö–æ–Ω—Ç–µ–Ω—Ç

P.S. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ!`
      break

    case 'BLOG_ARTICLE':
      generatedText = `${prompt}: –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤

üìñ –í–≤–µ–¥–µ–Ω–∏–µ

${prompt} - —ç—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é —Å—Ç–æ–∏—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ. –í —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏ –¥–∞–¥–∏–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ.

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:

1. –ß—Ç–æ —Ç–∞–∫–æ–µ ${prompt}?
–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞ —Ç–µ–º—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏.

2. –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?
–†–∞–∑–±–æ—Ä –≤—Ç–æ—Ä–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

3. –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ?
–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.

4. –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –∏ –∫–∞–∫ –∏—Ö –∏–∑–±–µ–∂–∞—Ç—å
–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏ —Å–ø–æ—Å–æ–±—ã –∏—Ö —Ä–µ—à–µ–Ω–∏—è.

üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã:
‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ
‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

üìä –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–ü–æ–¥–≤–æ–¥—è –∏—Ç–æ–≥–∏, –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ ${prompt} —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –ü—Ä–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —ç—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –º–æ—â–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.

üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã`
      break

    case 'INSTAGRAM_POST':
      generatedText = `${template.prefix}${prompt}

‚ú® –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π:
‚Ä¢ –ü—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –≤ –ª–µ–Ω—Ç–µ
‚Ä¢ –í—ã–∑—ã–≤–∞–µ—Ç —ç–º–æ—Ü–∏–∏ –∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∏–ª—é Instagram

üé® –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:
- –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
- –ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

üí¨ –í–æ–ø—Ä–æ—Å –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏:
–ö–∞–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ Instagram?

#instagram #–∫–æ–Ω—Ç–µ–Ω—Ç #smm #${prompt.split(' ')[0].toLowerCase()} #–¥–∏–∑–∞–π–Ω`
      break

    case 'AD_COPY':
      generatedText = `${template.prefix}${prompt}

üî• –û–ì–†–ê–ù–ò–ß–ï–ù–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï!

${prompt} - —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

‚ö° –ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ:
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
‚Ä¢ –õ—É—á—à–∏–µ —Ü–µ–Ω—ã —Å–µ–∑–æ–Ω–∞
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

üéØ –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é:
"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!"

‚è∞ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ 24 —á–∞—Å–∞!

#—Ä–µ–∫–ª–∞–º–∞ #${prompt.split(' ')[0].toLowerCase()} #—Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ`
      break

    default:
      generatedText = `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ç–µ–º—É: ${prompt}

‚ú® –ß—Ç–æ –º—ã —Å–æ–∑–¥–∞–ª–∏ –¥–ª—è –≤–∞—Å:
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
‚Ä¢ –ì–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª

üöÄ –≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç:
- –ü—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –ü–æ–≤—ã—Å–∏—Ç—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å
- –î–æ—Å—Ç–∏—á—å –≤–∞—à–∏—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Ü–µ–ª–µ–π

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
–ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥ –≤–∞—à –±—Ä–µ–Ω–¥ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.`
  }

  return { text: generatedText, imageUrl }
}

export async function POST(request: NextRequest) {
  try {
    const { prompt, templateType } = await request.json()

    if (!prompt || !templateType) {
      return NextResponse.json(
        { error: 'Prompt and template type are required' },
        { status: 400 }
      )
    }

    // Check if user is authenticated for usage tracking
    const authHeader = request.headers.get('authorization')
    let userId = null
    
    if (authHeader) {
      // In production, verify JWT token here
      // For now, we'll allow anonymous generation for demo
    }

    // Generate content
    const result = await generateContent(prompt, templateType)

    // Save generation to database if user is authenticated
    if (userId) {
      try {
        await prisma.generation.create({
          data: {
            userId,
            prompt,
            outputText: result.text,
            outputImageUrl: result.imageUrl,
            templateType: templateType as any,
          },
        })

        // Update user usage count
        await prisma.user.update({
          where: { id: userId },
          data: {
            usageCountDay: { increment: 1 },
            usageCountMonth: { increment: 1 },
            lastGenerationDate: new Date(),
          },
        })
      } catch (dbError) {
        console.error('Database error:', dbError)
        // Continue even if DB fails
      }
    }

    return NextResponse.json(result)
  } catch (error) {
    console.error('Generation error:', error)
    return NextResponse.json(
      { error: 'Failed to generate content' },
      { status: 500 }
    )
  }
}