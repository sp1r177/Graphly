'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui'

interface ModeInfo {
  mode: 'sync' | 'async'
  costPer1kTokens: number
  responseTime: string
  description: string
}

export function YandexGPTModeInfo() {
  const [modeInfo, setModeInfo] = useState<ModeInfo | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const isAsync = process.env.NEXT_PUBLIC_YANDEX_GPT_ASYNC_MODE === 'true'
    
    const info: ModeInfo = isAsync 
      ? {
          mode: 'async',
          costPer1kTokens: 0.20,
          responseTime: '10-60 —Å–µ–∫—É–Ω–¥',
          description: '–î–µ—à–µ–≤–ª–µ –≤ 2 —Ä–∞–∑–∞, –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
        }
      : {
          mode: 'sync',
          costPer1kTokens: 0.40,
          responseTime: '1-3 —Å–µ–∫—É–Ω–¥—ã',
          description: '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π'
        }
    
    setModeInfo(info)
    setLoading(false)
  }, [])

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã Yandex GPT</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="animate-pulse space-y-4">
            <div className="h-4 bg-gray-200 rounded w-3/4"></div>
            <div className="h-4 bg-gray-200 rounded w-1/2"></div>
          </div>
        </CardContent>
      </Card>
    )
  }

  if (!modeInfo) return null

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã Yandex GPT
          <span className={`px-2 py-1 text-xs rounded-full ${
            modeInfo.mode === 'async' 
              ? 'bg-green-100 text-green-800' 
              : 'bg-blue-100 text-blue-800'
          }`}>
            {modeInfo.mode === 'async' ? '–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π' : '–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π'}
          </span>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <div className="text-sm text-gray-600">–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤</div>
              <div className="text-2xl font-bold text-green-600">
                {modeInfo.costPer1kTokens}‚ÇΩ
              </div>
            </div>
            <div>
              <div className="text-sm text-gray-600">–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞</div>
              <div className="text-lg font-semibold">
                {modeInfo.responseTime}
              </div>
            </div>
          </div>
          
          <div className="text-sm text-gray-700">
            {modeInfo.description}
          </div>

          <div className="bg-gray-50 p-3 rounded-lg">
            <div className="text-sm font-medium text-gray-800 mb-2">
              –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏:
            </div>
            <div className="space-y-1 text-sm text-gray-600">
              <div>‚Ä¢ –ü–æ—Å—Ç –í–ö (100 —Ç–æ–∫–µ–Ω–æ–≤): {((modeInfo.costPer1kTokens * 100) / 1000).toFixed(3)}‚ÇΩ</div>
              <div>‚Ä¢ –°—Ç–∞—Ç—å—è –±–ª–æ–≥–∞ (1000 —Ç–æ–∫–µ–Ω–æ–≤): {modeInfo.costPer1kTokens}‚ÇΩ</div>
              <div>‚Ä¢ Email-–∫–∞–º–ø–∞–Ω–∏—è (500 —Ç–æ–∫–µ–Ω–æ–≤): {((modeInfo.costPer1kTokens * 500) / 1000).toFixed(2)}‚ÇΩ</div>
            </div>
          </div>

          {modeInfo.mode === 'async' && (
            <div className="bg-green-50 border border-green-200 p-3 rounded-lg">
              <div className="text-sm text-green-800">
                üí° <strong>–≠–∫–æ–Ω–æ–º–∏—è:</strong> –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤ 2 —Ä–∞–∑–∞ –¥–µ—à–µ–≤–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ!
              </div>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  )
}
