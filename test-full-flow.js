// –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
console.log('üîÑ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø + –ì–ï–ù–ï–†–ê–¶–ò–Ø\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function testRegistration() {
  console.log('üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');

  const testUser = {
    email: 'test' + Date.now() + '@example.com',
    password: 'Test123456',
    name: 'Test User'
  };

  try {
    const response = await fetch('http://localhost:3000/api/auth/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testUser)
    });

    console.log('üì° –°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', response.status);

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', data.user.email);
      return data.user;
    } else {
      const error = await response.json();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.error);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async function testGeneration() {
  console.log('\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');

  const testData = {
    prompt: '–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –æ –Ω–æ–≤–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ',
    templateType: 'VK_POST'
  };

  try {
    const response = await fetch('http://localhost:3000/api/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData)
    });

    console.log('üì° –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', response.status);

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
      console.log('üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):');
      console.log(data.text?.substring(0, 100) + '...');

      if (data.debug) {
        console.log('üêõ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
        console.log('- –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞:', data.debug.promptLength);
        console.log('- –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:', data.debug.textLength);
        console.log('- Dev —Ä–µ–∂–∏–º:', data.debug.isDev);
        console.log('- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', data.debug.hasAuth ? '‚úÖ' : '‚ùå');
      }

      return data;
    } else {
      const error = await response.json();
      console.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.error);
      if (error.details) {
        console.log('üìã –î–µ—Ç–∞–ª–∏:', error.details);
      }
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ API
async function testAPIStatus() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API...\n');

  try {
    const response = await fetch('http://localhost:3000/api/generate');
    const data = await response.json();

    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);

    if (response.ok && data.status === 'OK') {
      console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('\nüîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
      Object.entries(data.environment).forEach(([key, value]) => {
        console.log(`  ${key}: ${value}`);
      });

      const criticalVars = ['DATABASE_URL', 'JWT_SECRET'];
      const missing = criticalVars.filter(key => data.environment[key] === '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');

      if (missing.length > 0) {
        console.log('\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', missing.join(', '));
        console.log('–≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π!');
      } else {
        console.log('\n‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      }

      return true;
    } else {
      console.log('‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return false;
    }
  } catch (error) {
    console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    console.log('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('1. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä: npm run dev');
    console.log('2. –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–æ—Ä—Ç 3000');
    console.log('3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runFullTest() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´\n');
  console.log('=' .repeat(50));

  // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
  const apiOk = await testAPIStatus();

  if (!apiOk) {
    console.log('\n‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.');
    console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run dev');
    return;
  }

  // –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const user = await testRegistration();

  if (!user) {
    console.log('\n‚ö†Ô∏è  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...');
  }

  // –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const generation = await testGeneration();

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '=' .repeat(50));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');

  if (apiOk) {
    console.log('‚úÖ API —Å—Ç–∞—Ç—É—Å: —Ä–∞–±–æ—Ç–∞–µ—Ç');
  }

  if (user) {
    console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç');
  } else {
    console.log('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  }

  if (generation && generation.text) {
    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç');
  } else {
    console.log('‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  }

  console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:');
  if (generation && generation.text) {
    console.log('üéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢! –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç.');
  } else {
    console.log('‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
  }

  console.log('\nüí° –î–ê–õ–¨–ù–ï–ô–®–ò–ï –®–ê–ì–ò:');
  console.log('1. –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ');
  console.log('2. –ï—Å–ª–∏ –Ω–µ—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ');
  console.log('3. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫');
  console.log('4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: Ctrl+C, –∑–∞—Ç–µ–º npm run dev');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
runFullTest().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
});
