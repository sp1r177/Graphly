// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  vk_id     String   @unique
  email     String?  @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  usages    Usage[]
  generations Generation[]
  payments  Payment[]
  planId    String?
  plan      Plan?    @relation(fields: [planId], references: [id])
  
  @@map("users")
}

model Plan {
  id          String @id @default(cuid())
  name        String
  quota       Int
  price       Int?   // в копейках
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  
  @@map("plans")
}

model Usage {
  id        String   @id @default(cuid())
  userId    String
  used      Int      @default(0)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("usages")
}

model Generation {
  id          String   @id @default(cuid())
  userId      String
  prompt      String
  outputText  String
  templateType String
  tokensUsed  Int      @default(0)
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("generations")
}

model Payment {
  id                String   @id @default(cuid())
  userId            String
  yandexPaymentId   String?  @unique
  amount            Int      // в копейках
  status            String   @default("PENDING") // PENDING, COMPLETED, CANCELLED, FAILED
  subscriptionType  String?  // FREE, PRO100, PRO300, PRO1000
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}
